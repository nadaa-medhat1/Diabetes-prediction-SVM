# -*- coding: utf-8 -*-
"""my diabetes prediction project using svm classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GAkU29VOjJdApCbO02bhaqcQGbrPyLsH

Importing the dependencies
"""

import numpy as np 
import pandas as pd 
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and analysis
pima diabetes dataset
"""

# LOADING THE DIABETES DATASET TO A PANDAS DATAFRAME
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

#printing the first 5 rows of the dataset
diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset.describe()





# separating the data and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis=1) #axis=1 -- drop from columns & axis=0 -- drop from rows
Y = diabetes_dataset['Outcome']

"""Data Standardization"""

scaler = StandardScaler()

standardized_data = scaler.fit_transform(x)

print(standardized_data)

X = standardized_data
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

"""Train Test Split"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2 ,stratify=y ,random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel = 'linear')

#training the support vector machine classifier
classifier.fit(x_train, y_train)

x_train_prediction =  classifier.predict(x_train)

training_data_accuracy = accuracy_score(x_train_prediction, y_train)
print('Accuracy score of the training data : ', training_data_accuracy)

x_test_prediction = classifier.predict(x_test)

test_data_accuracy = accuracy_score(x_test_prediction ,y_test)
print('Accuracy score of the test data :',test_data_accuracy )

""" Making a predivtive system"""

input_data = (5,166,72,19,175,25.8,0.587,51)
#change the input data to numpuy array
input_data_as_numpy_array = np.asarray(input_data)
print(input_data_as_numpy_array)

input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)
print(input_data_reshaped )



std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction )

if prediction[0] == 0 :
 print (' the person is normal')
else:
 print (' the person is upnormal')

